{"version":3,"sources":["SortingVisualizer/SortingVisualizer.js","SortingAlgorithms/SortingAlgorithms.js","App.js","serviceWorker.js","index.js"],"names":["isRunning","bubbleSort","array","setArray","animationObject","len","length","animations","i","j","tmp","push","comparison","swap","sortedArray","Algorithm","slice","arrayBars","document","getElementsByClassName","firstBarStyle","style","secondBarStyle","setTimeout","backgroundColor","height","randomArray","newArray","randomIntFromInterval","min","max","Math","floor","random","SortingVisualizer","useState","className","onClick","map","value","id","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kQAIIA,G,OAAY,GA+BVC,EAAa,SAACC,EAAOC,GACvB,IAAIH,EAAJ,CAEAA,GAAY,EAMZ,IALA,IAAMI,EClCgB,SAAAF,GAGtB,IAFA,IAAMG,EAAMH,EAAMI,OACdC,EAAa,GACRC,EAAI,EAAGA,EAAIH,EAAM,EAAGG,IACzB,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAMG,EAAI,EAAGC,IAC7B,GAAIP,EAAMO,GAAKP,EAAMO,EAAI,GAAI,CACzB,IAAIC,EAAMR,EAAMO,GAChBP,EAAMO,GAAKP,EAAMO,EAAI,GACrBP,EAAMO,EAAI,GAAKC,EACfH,EAAWI,KAAK,CAACC,WAAY,CAACH,EAAGA,EAAI,GAAII,MAAM,SAG/CN,EAAWI,KAAK,CAACC,WAAY,CAACH,EAAGA,EAAI,GAAII,MAAM,IAI3D,MAAO,CAACN,WAAYA,EAAYO,YAAaZ,GDkBrBa,CAAqBb,EAAMc,SAC7CT,EAAaH,EAAgBG,WAC7BF,EAAME,EAAWD,OACjBW,EAAYC,SAASC,uBAAuB,aAPd,WAS3BX,GACL,IAAIY,EAAgBH,EAAUV,EAAWC,GAAGI,WAAW,IAAIS,MACvDC,EAAiBL,EAAUV,EAAWC,GAAGI,WAAW,IAAIS,MAC5DE,YAAW,WACPH,EAAcI,gBAAkB,UAChCF,EAAeE,gBAAkB,YAC9B,GAAJhB,GACCD,EAAWC,GAAGK,OACdU,YAAW,WACPH,EAAcI,gBAAkB,UAChCF,EAAeE,gBAAkB,YACtB,IAAXhB,EAAI,KACRe,YAAW,WACP,IAAIb,EAAMU,EAAcK,OACxBL,EAAcK,OAASH,EAAeG,OACtCH,EAAeG,OAASf,IACrB,GAAJF,IAEPe,YAAW,WACPH,EAAcI,gBAAkB,UAChCF,EAAeE,gBAAkB,YACtB,IAAXhB,EAAI,MArBHA,EAAI,EAAGA,EAAIH,EAAKG,IAAM,EAAtBA,GAuBTe,YAAW,WACPvB,GAAY,EACZG,EAASC,EAAgBU,eACpB,GAANT,KAGDqB,EAAc,SAACxB,GACjB,GAAIF,EACA,OAAOE,EAEX,IADA,IAAMyB,EAAW,GACRnB,EAAI,EAAGA,EAAI,IAAKA,IACrBmB,EAAShB,KAAKiB,EAAsB,EAAG,MAC3C,OAAOD,GAGLC,EAAwB,SAACC,EAAKC,GAChC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGzCK,EAhFW,WAAO,IAAD,EACFC,mBAAST,KADP,mBACrBxB,EADqB,KACdC,EADc,KAG5B,OACI,6BACI,4BAAQiC,UAAU,UACd,kDACA,yBAAKC,QAAS,kBAAMlC,EAASuB,EAAYxB,MACrC,mDAEJ,yBAAKmC,QAAS,kBAAMpC,EAAWC,EAAOC,KAClC,6CAGR,yBAAKiC,UAAU,uBACVlC,EAAMoC,KAAI,SAACC,EAAOC,GAAR,OACP,yBACIJ,UAAU,YACVK,IAAKD,EACLnB,MAAO,CAAEI,OAAO,GAAD,OAAa,GAARc,EAAa,IAAlB,eEdxBG,EARH,WACV,OACE,yBAAKN,UAAU,kBACb,kBAAC,EAAD,QCMcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhC,SAASiC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9ea0ee09.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport * as Algorithm from '../SortingAlgorithms/SortingAlgorithms';\nimport './SortingVisualizer.css';\n\nvar isRunning = false;\n\nconst SortingVisualizer = () => {\n    const [array, setArray] = useState(randomArray());\n\n    return (\n        <div>\n            <header className=\"header\">\n                <h1>Sorting Visualizer</h1>\n                <div onClick={() => setArray(randomArray(array))}>\n                    <h3>Generate new array</h3>\n                </div>\n                <div onClick={() => bubbleSort(array, setArray)}>\n                    <h3>Bubble Sort</h3>\n                </div>\n            </header>\n            <div className=\"array-bar-container\">\n                {array.map((value, id) => (\n                    <div\n                        className=\"array-bar\"\n                        key={id}\n                        style={{ height: `${value * 80 / 1000}vh` }}>\n                    </div>\n                ))}\n            </div>\n            {/* <p>Nb comparisons: </p> */}\n        </div>\n    );\n}\n\n\nconst bubbleSort = (array, setArray) => {\n    if (isRunning)\n        return ;\n    isRunning = true;\n    const animationObject = Algorithm.bubbleSort(array.slice())\n    const animations = animationObject.animations;\n    const len = animations.length;\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    for (let i = 0; i < len; i++) {\n        let firstBarStyle = arrayBars[animations[i].comparison[0]].style;\n        let secondBarStyle = arrayBars[animations[i].comparison[1]].style;\n        setTimeout(() => {\n            firstBarStyle.backgroundColor = '#34A853';\n            secondBarStyle.backgroundColor = '#34A853';\n        }, i * 10);\n        if (animations[i].swap) {\n            setTimeout(() => {\n                firstBarStyle.backgroundColor = '#EA4335';\n                secondBarStyle.backgroundColor = '#EA4335';\n            }, (i + 0.1) * 10);\n            setTimeout(() => {\n                let tmp = firstBarStyle.height;\n                firstBarStyle.height = secondBarStyle.height;\n                secondBarStyle.height = tmp;\n            }, i * 10);\n        }\n        setTimeout(() => {\n            firstBarStyle.backgroundColor = '#FBBC05';\n            secondBarStyle.backgroundColor = '#FBBC05';\n        }, (i + 0.6) * 10);\n    }\n    setTimeout(() => {\n        isRunning = false;\n        setArray(animationObject.sortedArray);\n    }, len * 10);\n}\n\nconst randomArray = (array) => {\n    if (isRunning)\n        return array;\n    const newArray = [];\n    for (let i = 0; i < 100; i++)\n        newArray.push(randomIntFromInterval(5, 1000));\n    return newArray;\n}\n\nconst randomIntFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default SortingVisualizer;","/*\n * Desc: Simple bubble sort algorithm\n * Param: the array to sort\n * Return: an object which contains an array of animations to play and the sorted array\n */\nexport const bubbleSort = array => {\n    const len = array.length;\n    let animations = []\n    for (let i = 0; i < len - 1; i++) {\n        for (let j = 0; j < len - i - 1; j++) {\n            if (array[j] > array[j + 1]) {\n                let tmp = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = tmp;\n                animations.push({comparison: [j, j + 1], swap: true});\n            }\n            else\n                animations.push({comparison: [j, j + 1], swap: false});\n        }\n    }\n\n    return {animations: animations, sortedArray: array};\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nconst App = () => {\n  return (\n    <div className=\"main-container\">\n      <SortingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}